openapi: 3.0.1
info:
  title: WebPos
  description: WebPos Application.
  version: 1.0.0
servers:
  - url: http://localhost:8080/webpos/api
tags:
  - name: failing
    description: Endpoint which always returns an error.
  - name: product
    description: Endpoints related to products.
  - name: category
    description: Endpoints related to categories.
  - name: order
    description: Endpoints related to orders.

paths:
  /products:
    get:
      summary: Get all products
      operationId: getProducts
      tags:
        - product
      parameters:
        - name: keyword
          in: query
          description: The keyword to filter products by
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: The category id to filter products by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/deduction:
    post:
      summary: Deduct products' stock
      operationId: deductProducts
      tags:
        - product
      requestBody:
        description: The deduction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deductions'
        required: true
      responses:
        201:
          description: The deduction request were successfully processed.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Get info for a specific product
      operationId: getProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a product by ID
      operationId: updateProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: The product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Updated product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories:
    get:
      summary: Get all categories
      operationId: getCategories
      tags:
        - category
      responses:
        '200':
          description: A paged array of categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders:
    post:
      summary: Create new orders
      operationId: addOrders
      tags:
        - order
      description: Add new orders
      requestBody:
        description: The orders
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
        required: true
      responses:
        201:
          description: The orders were successfully processed.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        categoryId:
          type: integer
        name:
          type: string
        price:
          type: number
          format: double
          minimum: 0
        stock:
          type: integer
          minimum: 0
        available:
          type: boolean
        image:
          type: string
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Order:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          minimum: 1
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    Deduction:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          minimum: 1
    Deductions:
      type: array
      items:
        $ref: "#/components/schemas/Deduction"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string